"use client";

import { useCallback, useEffect, useState } from "react";
import { list_barang_props, recordsProp } from "../../types";
import { useDispatch, useSelector } from "react-redux";
import { AppDispatch, RootState } from "../../store";
import {
  createRecordsThunk,
  deleteRecordsThunk,
  fetchRecordByIdThunk,
  fetchRecordsThunk,
  putRecordsThunk,
} from "../../store/log-productslice";

const useRecordsLogic = () => {
  const dispatch = useDispatch<AppDispatch>();
  // const [recordsData, setRecordsData] = useState<recordsProp[]>();
  // const [error, setError] = useState<string | null>(null);
  // const [loading, setLoading] = useState(false);
  const {
    items: recordsData, // Daftar semua records
    status: recordsListStatus, // Status for fetching all records ('idle', 'loading', 'succeeded', 'failed')
    error: recordsListError, // Error for fetching all records
    currentItem, // Single record data (contoh: untuk update/put)
  } = useSelector((state: RootState) => state.records);

  const [payload, setPayload] = useState<recordsProp>({
    nama: "",
    status: "Masuk",
    lokasi: "",
    list_barang: [{ nama_barang: "", qty: 1 }],
    nilai: 0,
    tanggal: new Date().toISOString(),
    keterangan: "",
  });
  const [formError, setFormError] = useState<string | null>(null);

  useEffect(() => {
    if (currentItem) {
      let parsedListBarang: list_barang_props[];
      if (typeof currentItem.list_barang === "string") {
        try {
          parsedListBarang = JSON.parse(currentItem.list_barang);
        } catch (e) {
          console.error("Failed to parse list_barang from string:", e);
          parsedListBarang = [{ nama_barang: "", qty: 1 }]; // Fallback
        }
      } else {
        parsedListBarang = currentItem.list_barang || [{ nama_barang: "", qty: 1 }];
      }
      setPayload({
        record_id: currentItem.record_id, // Important for update
        nama: currentItem.nama || "",
        status: currentItem.status || "Masuk",
        lokasi: currentItem.lokasi || "",
        list_barang: parsedListBarang.length > 0 ? parsedListBarang : [{ nama_barang: "", qty: 1 }],
        nilai: currentItem.nilai || 0,
        tanggal: currentItem.tanggal || new Date().toISOString(),
        keterangan: currentItem.keterangan || "",
      });
    }
  }, [currentItem]);

  const getRecords = useCallback(() => {
    dispatch(fetchRecordsThunk());
  }, [dispatch]);

  const validatePayload = useCallback((): boolean => {
    setFormError(null); // Clear previous form errors
    if (!payload.nama.trim()) {
      alert("Nama di isian hela a ðŸ˜…"); // Consider using setFormError for better UI
      setFormError("Nama tidak boleh kosong.");
      return false;
    }
    if (!payload.lokasi.trim()) {
      alert("Lokasina di isi oga a ðŸ¤ª");
      setFormError("Lokasi tidak boleh kosong.");
      return false;
    }
    if (payload.list_barang.some((item) => !item.nama_barang.trim() || item.qty < 1)) {
      alert("CEK HELA ATUH EYYY LIST BARANGNA ðŸ˜‡");
      setFormError("List barang tidak valid. Pastikan nama barang diisi dan kuantitas minimal 1.");
      return false;
    }
    return true;
  }, [payload]);

  // Functions untuk handle input dan forms POST, UPDATE/PUT, DELETE
  const populateForm = useCallback(
    async (recordId: number) => {
      setFormError(null); // Clear previous errors
      await dispatch(fetchRecordByIdThunk(recordId));
    },
    [dispatch]
  );

  const createRecord = useCallback(
    async (event: any) => {
      event.preventDefault();
      setFormError(null);

      if (!validatePayload()) return;
      if (!confirm("Yakin ingin menambah data ini? ðŸ‘‰ðŸ‘ˆ")) return;

      const { record_id, tanggal, ...dataToSubmit } = payload;
      const preparedData = { ...dataToSubmit, list_barang: JSON.stringify(payload.list_barang) };
      try {
        await dispatch(createRecordsThunk(preparedData)).unwrap();
      } catch (error) {
        setFormError(error.message || "Gagal Menambahkan data !!");
        console.log("Gagal Menambahkan", error);
      }
    },
    [payload, dispatch, validatePayload]
  );

  const putRecord = useCallback(async (recordId: number, event: any) => {
    event.preventDefault();
    setFormError(null);

    if (!validatePayload()) return;
    if (!confirm("Yakin ingin update data ini ?")) return;
    if (!payload.record_id || payload.record_id !== recordId)
      return setFormError("Record ID mismatch or missing. Cannot update.");

    const { record_id, tanggal, ...dataToSubmit } = payload;
    const preparedData = { ...dataToSubmit, list_barang: JSON.stringify(payload.list_barang) };

    try {
      await dispatch(putRecordsThunk({ recordId, updatedRecordPayload: preparedData })).unwrap();
    } catch (error) {
      setFormError(error.message || "Gagal update data, coba lagi nanti !!");
    }
  }, []);

  const removeRecord = useCallback(async (recordId: number, event: any) => {
    event.preventDefault();
    setFormError(null);
    if (!confirm("Yakin ingin menghapus data ini?")) return;

    try {
      await dispatch(deleteRecordsThunk(recordId)).unwrap();
      alert("Data berhasil dihapus!");
    } catch (error) {
      setFormError(error.message || "Gagal menghapus data !!");
      console.log("Gagal Menghapus", error);
    }
  }, []);

  // Update useState saat user isi input
  const handleInputChange = (field: keyof recordsProp, value: any) => {
    setPayload((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  // Handler khusus list barang
  const handleItemsChange = useCallback(
    (items: list_barang_props[]) => {
      handleInputChange("list_barang", items);
    },
    [handleInputChange]
  );

  // const putRecord = async (event: React.FormEvent, recordId: number) => {
  //   event.preventDefault();
  //   if (!confirm("Yakin ingin update data ini ?")) return;

  //   setLoading(true);
  //   try {
  //     if (!validatePayload()) return;

  //     const dataToSend = {
  //       ...payload,
  //       list_barang: JSON.stringify(payload.list_barang),
  //     };
  //     console.log(dataToSend);

  //     const res = await fetch(`http://inventory.jabnet.id/api/log-products/${recordId}`, {
  //       method: "PUT",
  //       headers: { "Content-Type": "application/json" },
  //       body: JSON.stringify(dataToSend),
  //     });

  //     if (!res.ok) throw new Error("Gagal update data !!");
  //     await getRecords(); // Ke diganti
  //     return await res.json();
  //   } catch (e: any) {
  //     setError(e.message);
  //     throw e;
  //   } finally {
  //     setLoading(false);
  //   }
  // };

  // const removeRecord = async (recordId: number) => {
  //   if (!confirm(`Yakin ingin hapus data ini ?`)) return;
  //   try {
  //     setLoading(true);
  //     const res = await fetch(`http://inventory.jabnet.id/api/log-products/${recordId}`, {
  //       method: "DELETE",
  //     });
  //     if (!res.ok) throw new Error("Gagal Hapus data, Coba lagi nanti !");
  //     await getRecords();
  //     return await res.json();
  //   } catch (error) {
  //     console.error("Error populating form:", error);
  //     setError("Failed to load record data");
  //   } finally {
  //     setLoading(false);
  //   }
  // };

  // const createRecord = async (event: React.FormEvent) => {
  //   event.preventDefault();
  //   setError(null);

  //   if (confirm("Yakin ? ðŸ‘‰ðŸ‘ˆ") !== true) return;

  //   setLoading(true);
  //   try {
  //     if (!validatePayload()) return;

  //     const dataToSend = {
  //       ...payload,
  //       list_barang: JSON.stringify(payload.list_barang),
  //     };

  //     const res = await fetch("http://inventory.jabnet.id/api/log-products", {
  //       method: "POST",
  //       headers: { "Content-Type": "application/json" },
  //       body: JSON.stringify(dataToSend),
  //     });

  //     if (!res.ok) throw new Error("Gagal tambah data !!");
  //     await getRecords(); // Ke diganti
  //     return await res.json();
  //   } catch (e: any) {
  //     setError(e.message);
  //     throw e;
  //   } finally {
  //     setLoading(false);
  //   }
  // };

  return {
    payload,
    recordsData,
    populateForm,
    putRecord,
    removeRecord,
    setPayload,
    getRecords,
    createRecord,
    handleInputChange,
    handleItemsChange,
  };
};

export default useRecordsLogic;


file nu bersangkutan jeng redux.
Folder store
file StoreProvider.tsx